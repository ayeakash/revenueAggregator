name: Daily YouTube KPI

on:
  schedule:
    # 02:00 UTC ≈ 07:30 IST
    - cron: "0 2 * * *"
  workflow_dispatch: {}    # manual runs

permissions:
  contents: read

jobs:
  run-daily:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: daily-youtube-kpi
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      # BEFORE: Run script
- name: Write secret files (robust)
  shell: bash
  run: |
    set -euo pipefail

    # --- Helper: write a secret to file from base64 or raw text ---
    write_secret_file() {
      local name="$1"   # env/secret name (for logging)
      local b64="$2"    # base64 secret value (may be empty)
      local raw="$3"    # raw secret value (may be empty)
      local out="$4"    # output file path

      if [[ -n "$b64" ]]; then
        echo "::notice::Decoding $name (base64) -> $out"
        echo "$b64" | base64 --decode > "$out"
        return 0
      elif [[ -n "$raw" ]]; then
        echo "::notice::Writing $name (raw) -> $out"
        # Use printf to preserve exact bytes/newlines
        printf '%s' "$raw" > "$out"
        return 0
      else
        echo "::notice::$name not provided; will not create $out"
        return 1
      fi
    }

    # --- Write mandatory tokens file ---
    write_secret_file "YT_TOKENS_JSON" \
      "${{ secrets.YT_TOKENS_JSON_B64 || '' }}" \
      "${{ secrets.YT_TOKENS_JSON      || '' }}" \
      yt_refresh_tokens.json

    # Fail early if tokens file wasn't created
    if [[ ! -f yt_refresh_tokens.json ]]; then
      echo "❌ yt_refresh_tokens.json was not created. Provide YT_TOKENS_JSON_B64 (preferred) or YT_TOKENS_JSON."
      exit 1
    fi

    # --- Write optional service account file (only if you use Sheets) ---
    SA_WROTE=0
    if write_secret_file "SERVICE_ACCOUNT_JSON" \
         "${{ secrets.SERVICE_ACCOUNT_JSON_B64 || '' }}" \
         "${{ secrets.SERVICE_ACCOUNT_JSON      || '' }}" \
         service_account.json; then
      SA_WROTE=1
    fi

    # --- Secure permissions only for files that exist ---
    [[ -f yt_refresh_tokens.json ]] && chmod 600 yt_refresh_tokens.json
    [[ -f service_account.json   ]] && chmod 600 service_account.json

    # --- Validate tokens JSON now to fail fast with a clear error ---
    python - <<'PY'
    import json, pathlib, sys
    p = pathlib.Path("yt_refresh_tokens.json")
    try:
        data = json.loads(p.read_text(encoding="utf-8"))
    except Exception as e:
        print("❌ yt_refresh_tokens.json is not valid JSON:", e)
        print("Tip: paste raw JSON (no backticks/extra quotes) or use base64 secret.")
        sys.exit(1)
    print("✅ yt_refresh_tokens.json valid. Channels:", list(data.keys()))
    PY

    # If you expect Sheets to work, ensure the SA file exists
    if [[ -n "${{ secrets.GOOGLE_SHEET_URL || '' }}" ]]; then
      if [[ $SA_WROTE -ne 1 ]]; then
        echo "::warning::GOOGLE_SHEET_URL is set but service_account.json was not provided. Sheets write will be skipped or fail."
      fi
    fi


      # - name: Write secret files (secure)
      #   shell: bash
      #   run: |
      #     set -euo pipefail
      #     printf '%s' "${{ secrets.YT_TOKENS_JSON }}" > yt_refresh_tokens.json
      #     printf '%s' "${{ secrets.SERVICE_ACCOUNT_JSON }}" > service_account.json
      #     chmod 600 yt_refresh_tokens.json service_account.json

      - name: Run script
        env:
          # OAuth for YouTube APIs
          YT_CLIENT_ID:     ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}

          # Slack
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

          # Sheets (optional)
          GOOGLE_SHEET_URL:   ${{ secrets.GOOGLE_SHEET_URL }}
          SHEETS_AUTH_MODE:   ${{ secrets.SHEETS_AUTH_MODE || 'service_account' }}
          SERVICE_ACCOUNT_JSON: service_account.json

          # Script config
          YT_TOKENS_FILE: yt_refresh_tokens.json
          YT_CURRENCY:    ${{ secrets.YT_CURRENCY || 'USD' }}
        run: python main.py
